-- Declare the SQL type for the PL/SQL type XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_REC
-- uncomment to overwrite existing types
-- CREATE OR REPLACE TYPE XXMAF_CUST_CARR_DX890762X1X3 AS OBJECT (
--       DETAILS VARCHAR2(300),
--       COUNT NUMBER,
--       CUSTOMER_ID NUMBER-- 
-- );
-- /
-- show errors
-- uncomment to overwrite existing types
-- CREATE OR REPLACE TYPE XXMAF_CUST_CARR_DX890762X1X2 AS TABLE OF APPS.XXMAF_CUST_CARR_DX890762X1X3; 
-- /
-- show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE BPEL_DBREFERENCE AS
	-- Declare the conversion functions the PL/SQL type APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_REC
	FUNCTION PL_TO_SQL1(aPlsqlItem APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_REC)
 	RETURN XXMAF_CUST_CARR_DX890762X1X3;
	FUNCTION SQL_TO_PL1(aSqlItem XXMAF_CUST_CARR_DX890762X1X3)
	RETURN APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_REC;
	-- Declare the conversion functions the PL/SQL type APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL
	FUNCTION PL_TO_SQL0(aPlsqlItem APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL)
 	RETURN XXMAF_CUST_CARR_DX890762X1X2;
	FUNCTION SQL_TO_PL0(aSqlItem XXMAF_CUST_CARR_DX890762X1X2)
	RETURN APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL;
   PROCEDURE xxmaf_cust_carr_det_pkg$get_c (PD_CUST_DATE VARCHAR2,
	PC_COUNT_DETAILS OUT XXMAF_CUST_CARR_DX890762X1X2
	);
END BPEL_DBREFERENCE;
/
show errors
CREATE OR REPLACE PACKAGE BODY BPEL_DBREFERENCE IS
	FUNCTION PL_TO_SQL1(aPlsqlItem APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_REC)
 	RETURN XXMAF_CUST_CARR_DX890762X1X3 IS 
	aSqlItem XXMAF_CUST_CARR_DX890762X1X3; 
	loop_counter number;
	BEGIN 
		-- initialize the object
		aSqlItem := XXMAF_CUST_CARR_DX890762X1X3(NULL, NULL, NULL);
		aSqlItem.DETAILS := aPlsqlItem.DETAILS;
		aSqlItem.COUNT := aPlsqlItem.COUNT;
		aSqlItem.CUSTOMER_ID := aPlsqlItem.CUSTOMER_ID;
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL1(aSqlItem XXMAF_CUST_CARR_DX890762X1X3) 
	RETURN APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_REC IS 
	aPlsqlItem APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_REC; 
	BEGIN 
		aPlsqlItem.DETAILS := aSqlItem.DETAILS;
		aPlsqlItem.COUNT := aSqlItem.COUNT;
		aPlsqlItem.CUSTOMER_ID := aSqlItem.CUSTOMER_ID;
		RETURN aPlsqlItem;
	END SQL_TO_PL1;
	FUNCTION PL_TO_SQL0(aPlsqlItem APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL)
 	RETURN XXMAF_CUST_CARR_DX890762X1X2 IS 
	aSqlItem XXMAF_CUST_CARR_DX890762X1X2; 
	loop_counter number;
	BEGIN 
		-- initialize the table 
		aSqlItem := XXMAF_CUST_CARR_DX890762X1X2();
		loop_counter :=1; 
		IF aPlsqlItem IS NOT NULL THEN
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		IF aPlsqlItem.COUNT>0 THEN
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			if (aSqlItem.exists(I) )  then 
			aSqlItem(loop_counter) := PL_TO_SQL1(aPlsqlItem(I));
			loop_counter:=loop_counter+1;
			 end if ;
		END LOOP; 
		END IF; 
		END IF; 
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL0(aSqlItem XXMAF_CUST_CARR_DX890762X1X2) 
	RETURN APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL IS 
	aPlsqlItem APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL; 
	BEGIN 
		aPlsqlItem := XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL();
		aPlsqlItem.EXTEND(aSqlItem.COUNT);
		IF aSqlItem.COUNT>0 THEN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL1(aSqlItem(I));
		END LOOP; 
		END IF;
		RETURN aPlsqlItem;
	END SQL_TO_PL0;

   PROCEDURE xxmaf_cust_carr_det_pkg$get_c (PD_CUST_DATE VARCHAR2,
	PC_COUNT_DETAILS OUT XXMAF_CUST_CARR_DX890762X1X2
	) IS
 PC_COUNT_DETAILS_ APPS.XXMAF_CUST_CARR_DET_PKG.XXMSF_SB_COUNT_TBL;
   BEGIN
      APPS.XXMAF_CUST_CARR_DET_PKG.GET_CUSTOMER_COUNT_RTS(PD_CUST_DATE,
	PC_COUNT_DETAILS_
	);
 PC_COUNT_DETAILS := BPEL_DBREFERENCE.PL_TO_SQL0(PC_COUNT_DETAILS_);
   END xxmaf_cust_carr_det_pkg$get_c;

END BPEL_DBREFERENCE;
/
show errors
exit
